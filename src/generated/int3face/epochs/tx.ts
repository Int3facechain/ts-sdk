// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/epochs/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../google/protobuf/duration";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "int3face.epochs";

/** Gov tx to add a new epoch info */
export interface MsgAddEpochInfo {
  /** Authority defines the x/gov module account */
  authority: string;
  /** identifier is a unique reference to this particular timer. */
  identifier: string;
  /**
   * duration is the time in between epoch ticks.
   * In order for intended behavior to be met, duration should
   * be greater than the chains expected block time.
   * Duration must be non-zero.
   */
  duration:
    | Duration
    | undefined;
  /**
   * start_time is the time at which the timer first ever ticks.
   * If start_time is in the future, the epoch will not begin until the start
   * time. If not provided, will default to current block time.
   */
  startTime: Date | undefined;
}

export interface MsgAddEpochInfoResponse {
}

function createBaseMsgAddEpochInfo(): MsgAddEpochInfo {
  return { authority: "", identifier: "", duration: undefined, startTime: undefined };
}

export const MsgAddEpochInfo: MessageFns<MsgAddEpochInfo> = {
  encode(message: MsgAddEpochInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.identifier !== "") {
      writer.uint32(18).string(message.identifier);
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(26).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddEpochInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddEpochInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identifier = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddEpochInfo {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
    };
  },

  toJSON(message: MsgAddEpochInfo): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.identifier !== "") {
      obj.identifier = message.identifier;
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAddEpochInfo>): MsgAddEpochInfo {
    return MsgAddEpochInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAddEpochInfo>): MsgAddEpochInfo {
    const message = createBaseMsgAddEpochInfo();
    message.authority = object.authority ?? "";
    message.identifier = object.identifier ?? "";
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.startTime = object.startTime ?? undefined;
    return message;
  },
};

function createBaseMsgAddEpochInfoResponse(): MsgAddEpochInfoResponse {
  return {};
}

export const MsgAddEpochInfoResponse: MessageFns<MsgAddEpochInfoResponse> = {
  encode(_: MsgAddEpochInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddEpochInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddEpochInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddEpochInfoResponse {
    return {};
  },

  toJSON(_: MsgAddEpochInfoResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgAddEpochInfoResponse>): MsgAddEpochInfoResponse {
    return MsgAddEpochInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgAddEpochInfoResponse>): MsgAddEpochInfoResponse {
    const message = createBaseMsgAddEpochInfoResponse();
    return message;
  },
};

/** Msg defines the epochs module's gRPC message service. */
export interface Msg {
  /** Gov tx to add a new epoch info */
  AddEpochInfo(request: MsgAddEpochInfo): Promise<MsgAddEpochInfoResponse>;
}

export const MsgServiceName = "int3face.epochs.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.AddEpochInfo = this.AddEpochInfo.bind(this);
  }
  AddEpochInfo(request: MsgAddEpochInfo): Promise<MsgAddEpochInfoResponse> {
    const data = MsgAddEpochInfo.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddEpochInfo", data);
    return promise.then((data) => MsgAddEpochInfoResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
