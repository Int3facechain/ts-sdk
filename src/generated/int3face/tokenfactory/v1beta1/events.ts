// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/tokenfactory/v1beta1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "int3face.tokenfactory.v1beta1";

export interface EventTokenfactoryMint {
  /** MintToAddress is the address of the account that minted the tokens. */
  mintToAddress: string;
  /** Amount defines the amount of tokens minted. */
  amount: Coin | undefined;
}

export interface EventTokenfactoryBurn {
  /** BurnFromAddress is the address of the account that burned the tokens. */
  burnFromAddress: string;
  /** Amount defines the amount of tokens burned. */
  amount: Coin | undefined;
}

function createBaseEventTokenfactoryMint(): EventTokenfactoryMint {
  return { mintToAddress: "", amount: undefined };
}

export const EventTokenfactoryMint: MessageFns<EventTokenfactoryMint> = {
  encode(message: EventTokenfactoryMint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintToAddress !== "") {
      writer.uint32(10).string(message.mintToAddress);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTokenfactoryMint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTokenfactoryMint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintToAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTokenfactoryMint {
    return {
      mintToAddress: isSet(object.mintToAddress) ? globalThis.String(object.mintToAddress) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: EventTokenfactoryMint): unknown {
    const obj: any = {};
    if (message.mintToAddress !== "") {
      obj.mintToAddress = message.mintToAddress;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create(base?: DeepPartial<EventTokenfactoryMint>): EventTokenfactoryMint {
    return EventTokenfactoryMint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventTokenfactoryMint>): EventTokenfactoryMint {
    const message = createBaseEventTokenfactoryMint();
    message.mintToAddress = object.mintToAddress ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseEventTokenfactoryBurn(): EventTokenfactoryBurn {
  return { burnFromAddress: "", amount: undefined };
}

export const EventTokenfactoryBurn: MessageFns<EventTokenfactoryBurn> = {
  encode(message: EventTokenfactoryBurn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.burnFromAddress !== "") {
      writer.uint32(10).string(message.burnFromAddress);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTokenfactoryBurn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTokenfactoryBurn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.burnFromAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTokenfactoryBurn {
    return {
      burnFromAddress: isSet(object.burnFromAddress) ? globalThis.String(object.burnFromAddress) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: EventTokenfactoryBurn): unknown {
    const obj: any = {};
    if (message.burnFromAddress !== "") {
      obj.burnFromAddress = message.burnFromAddress;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create(base?: DeepPartial<EventTokenfactoryBurn>): EventTokenfactoryBurn {
    return EventTokenfactoryBurn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventTokenfactoryBurn>): EventTokenfactoryBurn {
    const message = createBaseEventTokenfactoryBurn();
    message.burnFromAddress = object.burnFromAddress ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
