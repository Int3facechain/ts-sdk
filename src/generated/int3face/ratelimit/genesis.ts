// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/ratelimit/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Params } from "./params";
import { RateLimitFlow, RateLimitQuota } from "./ratelimit";

export const protobufPackage = "int3face.ratelimit";

/** GenesisState defines the ratelimit module's genesis state. */
export interface GenesisState {
  params: Params | undefined;
  rateLimitsFlow: RateLimitFlow[];
  rateLimitsQuota: RateLimitQuota[];
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, rateLimitsFlow: [], rateLimitsQuota: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.rateLimitsFlow) {
      RateLimitFlow.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.rateLimitsQuota) {
      RateLimitQuota.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rateLimitsFlow.push(RateLimitFlow.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rateLimitsQuota.push(RateLimitQuota.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      rateLimitsFlow: globalThis.Array.isArray(object?.rateLimitsFlow)
        ? object.rateLimitsFlow.map((e: any) => RateLimitFlow.fromJSON(e))
        : [],
      rateLimitsQuota: globalThis.Array.isArray(object?.rateLimitsQuota)
        ? object.rateLimitsQuota.map((e: any) => RateLimitQuota.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.rateLimitsFlow?.length) {
      obj.rateLimitsFlow = message.rateLimitsFlow.map((e) => RateLimitFlow.toJSON(e));
    }
    if (message.rateLimitsQuota?.length) {
      obj.rateLimitsQuota = message.rateLimitsQuota.map((e) => RateLimitQuota.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.rateLimitsFlow = object.rateLimitsFlow?.map((e) => RateLimitFlow.fromPartial(e)) || [];
    message.rateLimitsQuota = object.rateLimitsQuota?.map((e) => RateLimitQuota.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
