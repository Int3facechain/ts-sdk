// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/ratelimit/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AssetID } from "./ratelimit";

export const protobufPackage = "int3face.ratelimit";

export interface EventRateLimitExceeded {
  error: string;
  sourceChain: string;
  assetId: AssetID | undefined;
  amount: string;
  destinationChain: string;
}

function createBaseEventRateLimitExceeded(): EventRateLimitExceeded {
  return { error: "", sourceChain: "", assetId: undefined, amount: "", destinationChain: "" };
}

export const EventRateLimitExceeded: MessageFns<EventRateLimitExceeded> = {
  encode(message: EventRateLimitExceeded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.sourceChain !== "") {
      writer.uint32(18).string(message.sourceChain);
    }
    if (message.assetId !== undefined) {
      AssetID.encode(message.assetId, writer.uint32(26).fork()).join();
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.destinationChain !== "") {
      writer.uint32(42).string(message.destinationChain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventRateLimitExceeded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRateLimitExceeded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceChain = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assetId = AssetID.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRateLimitExceeded {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      sourceChain: isSet(object.sourceChain) ? globalThis.String(object.sourceChain) : "",
      assetId: isSet(object.assetId) ? AssetID.fromJSON(object.assetId) : undefined,
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      destinationChain: isSet(object.destinationChain) ? globalThis.String(object.destinationChain) : "",
    };
  },

  toJSON(message: EventRateLimitExceeded): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.sourceChain !== "") {
      obj.sourceChain = message.sourceChain;
    }
    if (message.assetId !== undefined) {
      obj.assetId = AssetID.toJSON(message.assetId);
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    return obj;
  },

  create(base?: DeepPartial<EventRateLimitExceeded>): EventRateLimitExceeded {
    return EventRateLimitExceeded.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventRateLimitExceeded>): EventRateLimitExceeded {
    const message = createBaseEventRateLimitExceeded();
    message.error = object.error ?? "";
    message.sourceChain = object.sourceChain ?? "";
    message.assetId = (object.assetId !== undefined && object.assetId !== null)
      ? AssetID.fromPartial(object.assetId)
      : undefined;
    message.amount = object.amount ?? "";
    message.destinationChain = object.destinationChain ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
