// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/ratelimit/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { RateLimitFlowQuota } from "./ratelimit";

export const protobufPackage = "int3face.ratelimit";

/** Queries all rate limits */
export interface AllRateLimitsRequest {
}

export interface AllRateLimitsResponse {
  rateLimits: RateLimitFlowQuota[];
}

/** Queries a specific rate limit by the chain and denom */
export interface RateLimitRequest {
  chain: string;
  assetId: string;
}

export interface RateLimitResponse {
  rateLimit: RateLimitFlowQuota | undefined;
}

function createBaseAllRateLimitsRequest(): AllRateLimitsRequest {
  return {};
}

export const AllRateLimitsRequest: MessageFns<AllRateLimitsRequest> = {
  encode(_: AllRateLimitsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllRateLimitsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllRateLimitsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AllRateLimitsRequest {
    return {};
  },

  toJSON(_: AllRateLimitsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AllRateLimitsRequest>): AllRateLimitsRequest {
    return AllRateLimitsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AllRateLimitsRequest>): AllRateLimitsRequest {
    const message = createBaseAllRateLimitsRequest();
    return message;
  },
};

function createBaseAllRateLimitsResponse(): AllRateLimitsResponse {
  return { rateLimits: [] };
}

export const AllRateLimitsResponse: MessageFns<AllRateLimitsResponse> = {
  encode(message: AllRateLimitsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rateLimits) {
      RateLimitFlowQuota.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllRateLimitsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllRateLimitsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimits.push(RateLimitFlowQuota.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllRateLimitsResponse {
    return {
      rateLimits: globalThis.Array.isArray(object?.rateLimits)
        ? object.rateLimits.map((e: any) => RateLimitFlowQuota.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AllRateLimitsResponse): unknown {
    const obj: any = {};
    if (message.rateLimits?.length) {
      obj.rateLimits = message.rateLimits.map((e) => RateLimitFlowQuota.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AllRateLimitsResponse>): AllRateLimitsResponse {
    return AllRateLimitsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AllRateLimitsResponse>): AllRateLimitsResponse {
    const message = createBaseAllRateLimitsResponse();
    message.rateLimits = object.rateLimits?.map((e) => RateLimitFlowQuota.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRateLimitRequest(): RateLimitRequest {
  return { chain: "", assetId: "" };
}

export const RateLimitRequest: MessageFns<RateLimitRequest> = {
  encode(message: RateLimitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.assetId !== "") {
      writer.uint32(18).string(message.assetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assetId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimitRequest {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      assetId: isSet(object.assetId) ? globalThis.String(object.assetId) : "",
    };
  },

  toJSON(message: RateLimitRequest): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.assetId !== "") {
      obj.assetId = message.assetId;
    }
    return obj;
  },

  create(base?: DeepPartial<RateLimitRequest>): RateLimitRequest {
    return RateLimitRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RateLimitRequest>): RateLimitRequest {
    const message = createBaseRateLimitRequest();
    message.chain = object.chain ?? "";
    message.assetId = object.assetId ?? "";
    return message;
  },
};

function createBaseRateLimitResponse(): RateLimitResponse {
  return { rateLimit: undefined };
}

export const RateLimitResponse: MessageFns<RateLimitResponse> = {
  encode(message: RateLimitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rateLimit !== undefined) {
      RateLimitFlowQuota.encode(message.rateLimit, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimit = RateLimitFlowQuota.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimitResponse {
    return { rateLimit: isSet(object.rateLimit) ? RateLimitFlowQuota.fromJSON(object.rateLimit) : undefined };
  },

  toJSON(message: RateLimitResponse): unknown {
    const obj: any = {};
    if (message.rateLimit !== undefined) {
      obj.rateLimit = RateLimitFlowQuota.toJSON(message.rateLimit);
    }
    return obj;
  },

  create(base?: DeepPartial<RateLimitResponse>): RateLimitResponse {
    return RateLimitResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RateLimitResponse>): RateLimitResponse {
    const message = createBaseRateLimitResponse();
    message.rateLimit = (object.rateLimit !== undefined && object.rateLimit !== null)
      ? RateLimitFlowQuota.fromPartial(object.rateLimit)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Queries all rate limits */
  AllRateLimits(request: AllRateLimitsRequest): Promise<AllRateLimitsResponse>;
  /** Queries a specific rate limit by chain and asset id */
  RateLimit(request: RateLimitRequest): Promise<RateLimitResponse>;
}

export const QueryServiceName = "int3face.ratelimit.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.AllRateLimits = this.AllRateLimits.bind(this);
    this.RateLimit = this.RateLimit.bind(this);
  }
  AllRateLimits(request: AllRateLimitsRequest): Promise<AllRateLimitsResponse> {
    const data = AllRateLimitsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllRateLimits", data);
    return promise.then((data) => AllRateLimitsResponse.decode(new BinaryReader(data)));
  }

  RateLimit(request: RateLimitRequest): Promise<RateLimitResponse> {
    const data = RateLimitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RateLimit", data);
    return promise.then((data) => RateLimitResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
