// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/quarantine/quarantine.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "int3face.quarantine";

/** QuarantinedEntityType defines the type of entity that can be quarantined */
export enum QuarantinedEntityType {
  /** QUARANTINED_ENTITY_TYPE_UNSPECIFIED - QUARANTINED_ENTITY_TYPE_UNSPECIFIED indicates an unspecified entity type */
  QUARANTINED_ENTITY_TYPE_UNSPECIFIED = 0,
  /**
   * QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER - QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER indicates an inbound transfer that
   * is quarantined and pending review
   */
  QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER = 1,
  UNRECOGNIZED = -1,
}

export function quarantinedEntityTypeFromJSON(object: any): QuarantinedEntityType {
  switch (object) {
    case 0:
    case "QUARANTINED_ENTITY_TYPE_UNSPECIFIED":
      return QuarantinedEntityType.QUARANTINED_ENTITY_TYPE_UNSPECIFIED;
    case 1:
    case "QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER":
      return QuarantinedEntityType.QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return QuarantinedEntityType.UNRECOGNIZED;
  }
}

export function quarantinedEntityTypeToJSON(object: QuarantinedEntityType): string {
  switch (object) {
    case QuarantinedEntityType.QUARANTINED_ENTITY_TYPE_UNSPECIFIED:
      return "QUARANTINED_ENTITY_TYPE_UNSPECIFIED";
    case QuarantinedEntityType.QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER:
      return "QUARANTINED_ENTITY_TYPE_INBOUND_TRANSFER";
    case QuarantinedEntityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** QuarantineVotingResult defines the result of voting on a quarantined entity */
export enum QuarantineVotingResult {
  /** QUARANTINE_VOTING_RESULT_UNSPECIFIED - QUARANTINE_VOTING_RESULT_UNSPECIFIED indicates an unspecified voting result */
  QUARANTINE_VOTING_RESULT_UNSPECIFIED = 0,
  /**
   * QUARANTINE_VOTING_RESULT_PROCESS - QUARANTINE_VOTING_RESULT_PROCESS indicates the entity should be processed
   * and finished
   */
  QUARANTINE_VOTING_RESULT_PROCESS = 1,
  /**
   * QUARANTINE_VOTING_RESULT_REJECT - QUARANTINE_VOTING_RESULT_REJECT indicates the entity should be rejected and
   * removed
   */
  QUARANTINE_VOTING_RESULT_REJECT = 2,
  UNRECOGNIZED = -1,
}

export function quarantineVotingResultFromJSON(object: any): QuarantineVotingResult {
  switch (object) {
    case 0:
    case "QUARANTINE_VOTING_RESULT_UNSPECIFIED":
      return QuarantineVotingResult.QUARANTINE_VOTING_RESULT_UNSPECIFIED;
    case 1:
    case "QUARANTINE_VOTING_RESULT_PROCESS":
      return QuarantineVotingResult.QUARANTINE_VOTING_RESULT_PROCESS;
    case 2:
    case "QUARANTINE_VOTING_RESULT_REJECT":
      return QuarantineVotingResult.QUARANTINE_VOTING_RESULT_REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return QuarantineVotingResult.UNRECOGNIZED;
  }
}

export function quarantineVotingResultToJSON(object: QuarantineVotingResult): string {
  switch (object) {
    case QuarantineVotingResult.QUARANTINE_VOTING_RESULT_UNSPECIFIED:
      return "QUARANTINE_VOTING_RESULT_UNSPECIFIED";
    case QuarantineVotingResult.QUARANTINE_VOTING_RESULT_PROCESS:
      return "QUARANTINE_VOTING_RESULT_PROCESS";
    case QuarantineVotingResult.QUARANTINE_VOTING_RESULT_REJECT:
      return "QUARANTINE_VOTING_RESULT_REJECT";
    case QuarantineVotingResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Params defines the ratelimit module's parameters. */
export interface Params {
}

export interface QuarantineItemData {
  /** Unique ID of quarantined entity */
  quarantineId: string;
  /** Height at  which the entity was quarantined */
  height: Long;
  /** EntityType is the type of entity that is being quarantined */
  entityType: QuarantinedEntityType;
  /** EntityID is the ID of the entity that is being quarantined */
  entityId: string;
  /** TxHash is the hash of the transaction that quarantined the entity */
  txHash: string;
  /**
   * TxSender is the address of the sender of the transaction that quarantined
   * the entity
   */
  txSender: string;
}

function createBaseParams(): Params {
  return {};
}

export const Params: MessageFns<Params> = {
  encode(_: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Params {
    return {};
  },

  toJSON(_: Params): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Params>): Params {
    const message = createBaseParams();
    return message;
  },
};

function createBaseQuarantineItemData(): QuarantineItemData {
  return { quarantineId: "", height: Long.UZERO, entityType: 0, entityId: "", txHash: "", txSender: "" };
}

export const QuarantineItemData: MessageFns<QuarantineItemData> = {
  encode(message: QuarantineItemData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quarantineId !== "") {
      writer.uint32(10).string(message.quarantineId);
    }
    if (!message.height.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.height.toString());
    }
    if (message.entityType !== 0) {
      writer.uint32(24).int32(message.entityType);
    }
    if (message.entityId !== "") {
      writer.uint32(34).string(message.entityId);
    }
    if (message.txHash !== "") {
      writer.uint32(42).string(message.txHash);
    }
    if (message.txSender !== "") {
      writer.uint32(50).string(message.txSender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuarantineItemData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuarantineItemData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quarantineId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.entityType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entityId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.txSender = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuarantineItemData {
    return {
      quarantineId: isSet(object.quarantineId) ? globalThis.String(object.quarantineId) : "",
      height: isSet(object.height) ? Long.fromValue(object.height) : Long.UZERO,
      entityType: isSet(object.entityType) ? quarantinedEntityTypeFromJSON(object.entityType) : 0,
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      txSender: isSet(object.txSender) ? globalThis.String(object.txSender) : "",
    };
  },

  toJSON(message: QuarantineItemData): unknown {
    const obj: any = {};
    if (message.quarantineId !== "") {
      obj.quarantineId = message.quarantineId;
    }
    if (!message.height.equals(Long.UZERO)) {
      obj.height = (message.height || Long.UZERO).toString();
    }
    if (message.entityType !== 0) {
      obj.entityType = quarantinedEntityTypeToJSON(message.entityType);
    }
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.txSender !== "") {
      obj.txSender = message.txSender;
    }
    return obj;
  },

  create(base?: DeepPartial<QuarantineItemData>): QuarantineItemData {
    return QuarantineItemData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuarantineItemData>): QuarantineItemData {
    const message = createBaseQuarantineItemData();
    message.quarantineId = object.quarantineId ?? "";
    message.height = (object.height !== undefined && object.height !== null)
      ? Long.fromValue(object.height)
      : Long.UZERO;
    message.entityType = object.entityType ?? 0;
    message.entityId = object.entityId ?? "";
    message.txHash = object.txHash ?? "";
    message.txSender = object.txSender ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
