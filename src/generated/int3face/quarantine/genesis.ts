// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/quarantine/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { QuarantineItemData } from "./quarantine";

export const protobufPackage = "int3face.quarantine";

/** GenesisState defines the mint module's genesis state. */
export interface GenesisState {
  quarantinedItems: { [key: string]: QuarantineItemData };
  counter: Long;
}

export interface GenesisState_QuarantinedItemsEntry {
  key: string;
  value: QuarantineItemData | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { quarantinedItems: {}, counter: Long.UZERO };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.quarantinedItems).forEach(([key, value]) => {
      GenesisState_QuarantinedItemsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (!message.counter.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.counter.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = GenesisState_QuarantinedItemsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.quarantinedItems[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.counter = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      quarantinedItems: isObject(object.quarantinedItems)
        ? Object.entries(object.quarantinedItems).reduce<{ [key: string]: QuarantineItemData }>((acc, [key, value]) => {
          acc[key] = QuarantineItemData.fromJSON(value);
          return acc;
        }, {})
        : {},
      counter: isSet(object.counter) ? Long.fromValue(object.counter) : Long.UZERO,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.quarantinedItems) {
      const entries = Object.entries(message.quarantinedItems);
      if (entries.length > 0) {
        obj.quarantinedItems = {};
        entries.forEach(([k, v]) => {
          obj.quarantinedItems[k] = QuarantineItemData.toJSON(v);
        });
      }
    }
    if (!message.counter.equals(Long.UZERO)) {
      obj.counter = (message.counter || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.quarantinedItems = Object.entries(object.quarantinedItems ?? {}).reduce<
      { [key: string]: QuarantineItemData }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = QuarantineItemData.fromPartial(value);
      }
      return acc;
    }, {});
    message.counter = (object.counter !== undefined && object.counter !== null)
      ? Long.fromValue(object.counter)
      : Long.UZERO;
    return message;
  },
};

function createBaseGenesisState_QuarantinedItemsEntry(): GenesisState_QuarantinedItemsEntry {
  return { key: "", value: undefined };
}

export const GenesisState_QuarantinedItemsEntry: MessageFns<GenesisState_QuarantinedItemsEntry> = {
  encode(message: GenesisState_QuarantinedItemsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      QuarantineItemData.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState_QuarantinedItemsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_QuarantinedItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = QuarantineItemData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_QuarantinedItemsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? QuarantineItemData.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GenesisState_QuarantinedItemsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = QuarantineItemData.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState_QuarantinedItemsEntry>): GenesisState_QuarantinedItemsEntry {
    return GenesisState_QuarantinedItemsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState_QuarantinedItemsEntry>): GenesisState_QuarantinedItemsEntry {
    const message = createBaseGenesisState_QuarantinedItemsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? QuarantineItemData.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
