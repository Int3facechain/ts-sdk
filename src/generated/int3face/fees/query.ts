// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/fees/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AssetID } from "../bridge/v1beta1/bridge";
import { BridgeFees, Params } from "./fees";

export const protobufPackage = "int3face.fees";

/** MsgQueryParamsRequest is the request type for the QueryParams RPC method. */
export interface MsgQueryParamsRequest {
}

/** MsgGetParamsResponse is the response type for the QueryParams RPC method. */
export interface MsgQueryParamsResponse {
  /** Params for x/fees module. */
  params: Params | undefined;
}

/**
 * MsgQueryBridgeFeesRequest defines the request type for the QueryBridgeFees
 * RPC method.
 */
export interface MsgQueryBridgeFeesRequest {
}

/**
 * MsgQueryBridgeFeesResponse defines the response type for the QueryBridgeFees
 * RPC method.
 */
export interface MsgQueryBridgeFeesResponse {
  /** BridgeFees defines the bridge fees. */
  bridgeFees: BridgeFees | undefined;
}

/**
 * MsgQueryFeeEstimationRequest defines the request type for the
 * QueryFeeEstimation RPC method.
 */
export interface MsgQueryFeeEstimationRequest {
  /** Source chain id. */
  srcChainId: string;
  /** Destination chain id. */
  dstChainId: string;
  /** Asset id. */
  assetId: AssetID | undefined;
}

/**
 * MsgQueryFeeEstimationResponse defines the response type for the
 * QueryFeeEstimation RPC method.
 */
export interface MsgQueryFeeEstimationResponse {
  /** Fee rate for the bridge route/asset. */
  feeRate: string;
}

function createBaseMsgQueryParamsRequest(): MsgQueryParamsRequest {
  return {};
}

export const MsgQueryParamsRequest: MessageFns<MsgQueryParamsRequest> = {
  encode(_: MsgQueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgQueryParamsRequest {
    return {};
  },

  toJSON(_: MsgQueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgQueryParamsRequest>): MsgQueryParamsRequest {
    return MsgQueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgQueryParamsRequest>): MsgQueryParamsRequest {
    const message = createBaseMsgQueryParamsRequest();
    return message;
  },
};

function createBaseMsgQueryParamsResponse(): MsgQueryParamsResponse {
  return { params: undefined };
}

export const MsgQueryParamsResponse: MessageFns<MsgQueryParamsResponse> = {
  encode(message: MsgQueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: MsgQueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryParamsResponse>): MsgQueryParamsResponse {
    return MsgQueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryParamsResponse>): MsgQueryParamsResponse {
    const message = createBaseMsgQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgQueryBridgeFeesRequest(): MsgQueryBridgeFeesRequest {
  return {};
}

export const MsgQueryBridgeFeesRequest: MessageFns<MsgQueryBridgeFeesRequest> = {
  encode(_: MsgQueryBridgeFeesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryBridgeFeesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryBridgeFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgQueryBridgeFeesRequest {
    return {};
  },

  toJSON(_: MsgQueryBridgeFeesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgQueryBridgeFeesRequest>): MsgQueryBridgeFeesRequest {
    return MsgQueryBridgeFeesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgQueryBridgeFeesRequest>): MsgQueryBridgeFeesRequest {
    const message = createBaseMsgQueryBridgeFeesRequest();
    return message;
  },
};

function createBaseMsgQueryBridgeFeesResponse(): MsgQueryBridgeFeesResponse {
  return { bridgeFees: undefined };
}

export const MsgQueryBridgeFeesResponse: MessageFns<MsgQueryBridgeFeesResponse> = {
  encode(message: MsgQueryBridgeFeesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bridgeFees !== undefined) {
      BridgeFees.encode(message.bridgeFees, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryBridgeFeesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryBridgeFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bridgeFees = BridgeFees.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryBridgeFeesResponse {
    return { bridgeFees: isSet(object.bridgeFees) ? BridgeFees.fromJSON(object.bridgeFees) : undefined };
  },

  toJSON(message: MsgQueryBridgeFeesResponse): unknown {
    const obj: any = {};
    if (message.bridgeFees !== undefined) {
      obj.bridgeFees = BridgeFees.toJSON(message.bridgeFees);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryBridgeFeesResponse>): MsgQueryBridgeFeesResponse {
    return MsgQueryBridgeFeesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryBridgeFeesResponse>): MsgQueryBridgeFeesResponse {
    const message = createBaseMsgQueryBridgeFeesResponse();
    message.bridgeFees = (object.bridgeFees !== undefined && object.bridgeFees !== null)
      ? BridgeFees.fromPartial(object.bridgeFees)
      : undefined;
    return message;
  },
};

function createBaseMsgQueryFeeEstimationRequest(): MsgQueryFeeEstimationRequest {
  return { srcChainId: "", dstChainId: "", assetId: undefined };
}

export const MsgQueryFeeEstimationRequest: MessageFns<MsgQueryFeeEstimationRequest> = {
  encode(message: MsgQueryFeeEstimationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.srcChainId !== "") {
      writer.uint32(10).string(message.srcChainId);
    }
    if (message.dstChainId !== "") {
      writer.uint32(18).string(message.dstChainId);
    }
    if (message.assetId !== undefined) {
      AssetID.encode(message.assetId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryFeeEstimationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryFeeEstimationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.srcChainId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dstChainId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assetId = AssetID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryFeeEstimationRequest {
    return {
      srcChainId: isSet(object.srcChainId) ? globalThis.String(object.srcChainId) : "",
      dstChainId: isSet(object.dstChainId) ? globalThis.String(object.dstChainId) : "",
      assetId: isSet(object.assetId) ? AssetID.fromJSON(object.assetId) : undefined,
    };
  },

  toJSON(message: MsgQueryFeeEstimationRequest): unknown {
    const obj: any = {};
    if (message.srcChainId !== "") {
      obj.srcChainId = message.srcChainId;
    }
    if (message.dstChainId !== "") {
      obj.dstChainId = message.dstChainId;
    }
    if (message.assetId !== undefined) {
      obj.assetId = AssetID.toJSON(message.assetId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryFeeEstimationRequest>): MsgQueryFeeEstimationRequest {
    return MsgQueryFeeEstimationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryFeeEstimationRequest>): MsgQueryFeeEstimationRequest {
    const message = createBaseMsgQueryFeeEstimationRequest();
    message.srcChainId = object.srcChainId ?? "";
    message.dstChainId = object.dstChainId ?? "";
    message.assetId = (object.assetId !== undefined && object.assetId !== null)
      ? AssetID.fromPartial(object.assetId)
      : undefined;
    return message;
  },
};

function createBaseMsgQueryFeeEstimationResponse(): MsgQueryFeeEstimationResponse {
  return { feeRate: "" };
}

export const MsgQueryFeeEstimationResponse: MessageFns<MsgQueryFeeEstimationResponse> = {
  encode(message: MsgQueryFeeEstimationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feeRate !== "") {
      writer.uint32(10).string(message.feeRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryFeeEstimationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryFeeEstimationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.feeRate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryFeeEstimationResponse {
    return { feeRate: isSet(object.feeRate) ? globalThis.String(object.feeRate) : "" };
  },

  toJSON(message: MsgQueryFeeEstimationResponse): unknown {
    const obj: any = {};
    if (message.feeRate !== "") {
      obj.feeRate = message.feeRate;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryFeeEstimationResponse>): MsgQueryFeeEstimationResponse {
    return MsgQueryFeeEstimationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryFeeEstimationResponse>): MsgQueryFeeEstimationResponse {
    const message = createBaseMsgQueryFeeEstimationResponse();
    message.feeRate = object.feeRate ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** QueryParams returns x/fees module params. */
  QueryParams(request: MsgQueryParamsRequest): Promise<MsgQueryParamsResponse>;
  /** QueryBridgeFees returns the bridge fees. */
  QueryBridgeFees(request: MsgQueryBridgeFeesRequest): Promise<MsgQueryBridgeFeesResponse>;
  /**
   * QueryFeeEstimation returns the fee estimation for a given asset and
   * src/dest chain.
   */
  QueryFeeEstimation(request: MsgQueryFeeEstimationRequest): Promise<MsgQueryFeeEstimationResponse>;
}

export const QueryServiceName = "int3face.fees.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.QueryParams = this.QueryParams.bind(this);
    this.QueryBridgeFees = this.QueryBridgeFees.bind(this);
    this.QueryFeeEstimation = this.QueryFeeEstimation.bind(this);
  }
  QueryParams(request: MsgQueryParamsRequest): Promise<MsgQueryParamsResponse> {
    const data = MsgQueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryParams", data);
    return promise.then((data) => MsgQueryParamsResponse.decode(new BinaryReader(data)));
  }

  QueryBridgeFees(request: MsgQueryBridgeFeesRequest): Promise<MsgQueryBridgeFeesResponse> {
    const data = MsgQueryBridgeFeesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryBridgeFees", data);
    return promise.then((data) => MsgQueryBridgeFeesResponse.decode(new BinaryReader(data)));
  }

  QueryFeeEstimation(request: MsgQueryFeeEstimationRequest): Promise<MsgQueryFeeEstimationResponse> {
    const data = MsgQueryFeeEstimationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryFeeEstimation", data);
    return promise.then((data) => MsgQueryFeeEstimationResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
