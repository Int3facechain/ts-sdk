// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/fees/fees.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { AssetID } from "../bridge/v1beta1/bridge";

export const protobufPackage = "int3face.fees";

/** Params defines the x/fees module's parameters. */
export interface Params {
}

/** BridgeFees defines the bridge fees for different routes. */
export interface BridgeFees {
  /** BridgeRoutes is a list of bridge routes with their fees. */
  routes: BridgeRouteFees[];
}

export interface BridgeRouteFees {
  /** Source chain Id of the bridge route. */
  srcChainId: string;
  /** Destination chain Id of the bridge route. */
  dstChainId: string;
  /** Fee rate for the bridge route. */
  feeRate: string;
  /**
   * Asset level fees for the bridge route.
   * Can be used to override the fee rate for specific assets on the route.
   */
  assetFees: AssetFees[];
}

export interface AssetFees {
  assetId: AssetID | undefined;
  feeRate: string;
}

function createBaseParams(): Params {
  return {};
}

export const Params: MessageFns<Params> = {
  encode(_: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Params {
    return {};
  },

  toJSON(_: Params): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Params>): Params {
    const message = createBaseParams();
    return message;
  },
};

function createBaseBridgeFees(): BridgeFees {
  return { routes: [] };
}

export const BridgeFees: MessageFns<BridgeFees> = {
  encode(message: BridgeFees, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routes) {
      BridgeRouteFees.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BridgeFees {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBridgeFees();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.routes.push(BridgeRouteFees.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BridgeFees {
    return {
      routes: globalThis.Array.isArray(object?.routes)
        ? object.routes.map((e: any) => BridgeRouteFees.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BridgeFees): unknown {
    const obj: any = {};
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => BridgeRouteFees.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BridgeFees>): BridgeFees {
    return BridgeFees.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BridgeFees>): BridgeFees {
    const message = createBaseBridgeFees();
    message.routes = object.routes?.map((e) => BridgeRouteFees.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBridgeRouteFees(): BridgeRouteFees {
  return { srcChainId: "", dstChainId: "", feeRate: "", assetFees: [] };
}

export const BridgeRouteFees: MessageFns<BridgeRouteFees> = {
  encode(message: BridgeRouteFees, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.srcChainId !== "") {
      writer.uint32(10).string(message.srcChainId);
    }
    if (message.dstChainId !== "") {
      writer.uint32(18).string(message.dstChainId);
    }
    if (message.feeRate !== "") {
      writer.uint32(26).string(message.feeRate);
    }
    for (const v of message.assetFees) {
      AssetFees.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BridgeRouteFees {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBridgeRouteFees();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.srcChainId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dstChainId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.feeRate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.assetFees.push(AssetFees.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BridgeRouteFees {
    return {
      srcChainId: isSet(object.srcChainId) ? globalThis.String(object.srcChainId) : "",
      dstChainId: isSet(object.dstChainId) ? globalThis.String(object.dstChainId) : "",
      feeRate: isSet(object.feeRate) ? globalThis.String(object.feeRate) : "",
      assetFees: globalThis.Array.isArray(object?.assetFees)
        ? object.assetFees.map((e: any) => AssetFees.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BridgeRouteFees): unknown {
    const obj: any = {};
    if (message.srcChainId !== "") {
      obj.srcChainId = message.srcChainId;
    }
    if (message.dstChainId !== "") {
      obj.dstChainId = message.dstChainId;
    }
    if (message.feeRate !== "") {
      obj.feeRate = message.feeRate;
    }
    if (message.assetFees?.length) {
      obj.assetFees = message.assetFees.map((e) => AssetFees.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BridgeRouteFees>): BridgeRouteFees {
    return BridgeRouteFees.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BridgeRouteFees>): BridgeRouteFees {
    const message = createBaseBridgeRouteFees();
    message.srcChainId = object.srcChainId ?? "";
    message.dstChainId = object.dstChainId ?? "";
    message.feeRate = object.feeRate ?? "";
    message.assetFees = object.assetFees?.map((e) => AssetFees.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAssetFees(): AssetFees {
  return { assetId: undefined, feeRate: "" };
}

export const AssetFees: MessageFns<AssetFees> = {
  encode(message: AssetFees, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assetId !== undefined) {
      AssetID.encode(message.assetId, writer.uint32(10).fork()).join();
    }
    if (message.feeRate !== "") {
      writer.uint32(18).string(message.feeRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetFees {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetFees();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.assetId = AssetID.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.feeRate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetFees {
    return {
      assetId: isSet(object.assetId) ? AssetID.fromJSON(object.assetId) : undefined,
      feeRate: isSet(object.feeRate) ? globalThis.String(object.feeRate) : "",
    };
  },

  toJSON(message: AssetFees): unknown {
    const obj: any = {};
    if (message.assetId !== undefined) {
      obj.assetId = AssetID.toJSON(message.assetId);
    }
    if (message.feeRate !== "") {
      obj.feeRate = message.feeRate;
    }
    return obj;
  },

  create(base?: DeepPartial<AssetFees>): AssetFees {
    return AssetFees.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetFees>): AssetFees {
    const message = createBaseAssetFees();
    message.assetId = (object.assetId !== undefined && object.assetId !== null)
      ? AssetID.fromPartial(object.assetId)
      : undefined;
    message.feeRate = object.feeRate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
