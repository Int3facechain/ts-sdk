// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/incentives/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Params } from "./incentives";

export const protobufPackage = "int3face.incentives";

/** MsgQueryParamsRequest is the request type for the QueryParams RPC method. */
export interface MsgQueryParamsRequest {
}

/** MsgGetParamsResponse is the response type for the QueryParams RPC method. */
export interface MsgQueryParamsResponse {
  /** Params for x/incentives module. */
  params: Params | undefined;
}

/**
 * MsgQueryPendingIncentivesRequest is the request type for the
 * QueryPendingIncentives RPC method.
 */
export interface MsgQueryPendingIncentivesRequest {
}

/**
 * MsgQueryPendingIncentivesResponse is the response type for the
 * QueryPendingIncentives RPC method.
 */
export interface MsgQueryPendingIncentivesResponse {
  account: string;
  balances: Coin[];
}

/**
 * MsgQueryClaimableIncentivesRequest is the request type for the
 * QueryClaimableIncentives RPC method.
 */
export interface MsgQueryClaimableIncentivesRequest {
}

/**
 * MsgQueryClaimableIncentivesResponse is the response type for the
 * QueryClaimableIncentives RPC method.
 */
export interface MsgQueryClaimableIncentivesResponse {
  account: string;
  balances: Coin[];
}

function createBaseMsgQueryParamsRequest(): MsgQueryParamsRequest {
  return {};
}

export const MsgQueryParamsRequest: MessageFns<MsgQueryParamsRequest> = {
  encode(_: MsgQueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgQueryParamsRequest {
    return {};
  },

  toJSON(_: MsgQueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgQueryParamsRequest>): MsgQueryParamsRequest {
    return MsgQueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgQueryParamsRequest>): MsgQueryParamsRequest {
    const message = createBaseMsgQueryParamsRequest();
    return message;
  },
};

function createBaseMsgQueryParamsResponse(): MsgQueryParamsResponse {
  return { params: undefined };
}

export const MsgQueryParamsResponse: MessageFns<MsgQueryParamsResponse> = {
  encode(message: MsgQueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: MsgQueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryParamsResponse>): MsgQueryParamsResponse {
    return MsgQueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryParamsResponse>): MsgQueryParamsResponse {
    const message = createBaseMsgQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgQueryPendingIncentivesRequest(): MsgQueryPendingIncentivesRequest {
  return {};
}

export const MsgQueryPendingIncentivesRequest: MessageFns<MsgQueryPendingIncentivesRequest> = {
  encode(_: MsgQueryPendingIncentivesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryPendingIncentivesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryPendingIncentivesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgQueryPendingIncentivesRequest {
    return {};
  },

  toJSON(_: MsgQueryPendingIncentivesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgQueryPendingIncentivesRequest>): MsgQueryPendingIncentivesRequest {
    return MsgQueryPendingIncentivesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgQueryPendingIncentivesRequest>): MsgQueryPendingIncentivesRequest {
    const message = createBaseMsgQueryPendingIncentivesRequest();
    return message;
  },
};

function createBaseMsgQueryPendingIncentivesResponse(): MsgQueryPendingIncentivesResponse {
  return { account: "", balances: [] };
}

export const MsgQueryPendingIncentivesResponse: MessageFns<MsgQueryPendingIncentivesResponse> = {
  encode(message: MsgQueryPendingIncentivesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    for (const v of message.balances) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryPendingIncentivesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryPendingIncentivesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balances.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryPendingIncentivesResponse {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      balances: globalThis.Array.isArray(object?.balances) ? object.balances.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgQueryPendingIncentivesResponse): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.balances?.length) {
      obj.balances = message.balances.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryPendingIncentivesResponse>): MsgQueryPendingIncentivesResponse {
    return MsgQueryPendingIncentivesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryPendingIncentivesResponse>): MsgQueryPendingIncentivesResponse {
    const message = createBaseMsgQueryPendingIncentivesResponse();
    message.account = object.account ?? "";
    message.balances = object.balances?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgQueryClaimableIncentivesRequest(): MsgQueryClaimableIncentivesRequest {
  return {};
}

export const MsgQueryClaimableIncentivesRequest: MessageFns<MsgQueryClaimableIncentivesRequest> = {
  encode(_: MsgQueryClaimableIncentivesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryClaimableIncentivesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryClaimableIncentivesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgQueryClaimableIncentivesRequest {
    return {};
  },

  toJSON(_: MsgQueryClaimableIncentivesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgQueryClaimableIncentivesRequest>): MsgQueryClaimableIncentivesRequest {
    return MsgQueryClaimableIncentivesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgQueryClaimableIncentivesRequest>): MsgQueryClaimableIncentivesRequest {
    const message = createBaseMsgQueryClaimableIncentivesRequest();
    return message;
  },
};

function createBaseMsgQueryClaimableIncentivesResponse(): MsgQueryClaimableIncentivesResponse {
  return { account: "", balances: [] };
}

export const MsgQueryClaimableIncentivesResponse: MessageFns<MsgQueryClaimableIncentivesResponse> = {
  encode(message: MsgQueryClaimableIncentivesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    for (const v of message.balances) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgQueryClaimableIncentivesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgQueryClaimableIncentivesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balances.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgQueryClaimableIncentivesResponse {
    return {
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      balances: globalThis.Array.isArray(object?.balances) ? object.balances.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgQueryClaimableIncentivesResponse): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.balances?.length) {
      obj.balances = message.balances.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgQueryClaimableIncentivesResponse>): MsgQueryClaimableIncentivesResponse {
    return MsgQueryClaimableIncentivesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgQueryClaimableIncentivesResponse>): MsgQueryClaimableIncentivesResponse {
    const message = createBaseMsgQueryClaimableIncentivesResponse();
    message.account = object.account ?? "";
    message.balances = object.balances?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** QueryParams returns x/incentives module params. */
  QueryParams(request: MsgQueryParamsRequest): Promise<MsgQueryParamsResponse>;
  /**
   * QueryPendingIncentives returns x/incentives module pending incentives
   * information.
   */
  QueryPendingIncentives(request: MsgQueryPendingIncentivesRequest): Promise<MsgQueryPendingIncentivesResponse>;
  /**
   * QueryClaimableIncentives returns x/incentives module claimable incentives
   * information.
   */
  QueryClaimableIncentives(request: MsgQueryClaimableIncentivesRequest): Promise<MsgQueryClaimableIncentivesResponse>;
}

export const QueryServiceName = "int3face.incentives.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.QueryParams = this.QueryParams.bind(this);
    this.QueryPendingIncentives = this.QueryPendingIncentives.bind(this);
    this.QueryClaimableIncentives = this.QueryClaimableIncentives.bind(this);
  }
  QueryParams(request: MsgQueryParamsRequest): Promise<MsgQueryParamsResponse> {
    const data = MsgQueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryParams", data);
    return promise.then((data) => MsgQueryParamsResponse.decode(new BinaryReader(data)));
  }

  QueryPendingIncentives(request: MsgQueryPendingIncentivesRequest): Promise<MsgQueryPendingIncentivesResponse> {
    const data = MsgQueryPendingIncentivesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryPendingIncentives", data);
    return promise.then((data) => MsgQueryPendingIncentivesResponse.decode(new BinaryReader(data)));
  }

  QueryClaimableIncentives(request: MsgQueryClaimableIncentivesRequest): Promise<MsgQueryClaimableIncentivesResponse> {
    const data = MsgQueryClaimableIncentivesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryClaimableIncentives", data);
    return promise.then((data) => MsgQueryClaimableIncentivesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
