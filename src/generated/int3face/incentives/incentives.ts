// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/incentives/incentives.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "int3face.incentives";

/** Params defines the x/incentives module's parameters. */
export interface Params {
}

/**
 * WeightedReceiver defines a receiver of rewards and the percentage of the
 * total fees that they will receive.
 */
export interface WeightedReceiver {
  /**
   * Receiver is the Int3face address of the account that will receive the
   * rewards.
   */
  receiver: string;
  /**
   * Weight is the percentage of the total fees that the receiver will receive.
   * Must be a positive Decimal (N > 0 && N <= 1).
   */
  weight: string;
}

/**
 * RewardedReceiver defines a receiver of rewards and the amount of the total
 * fees that are received.
 */
export interface RewardedReceiver {
  /**
   * Receiver is the Int3face address of the account that has received the
   * rewards.
   */
  receiver: string;
  /** Reward is the amount of the total fees that the receiver has received. */
  rewards: Coin[];
}

function createBaseParams(): Params {
  return {};
}

export const Params: MessageFns<Params> = {
  encode(_: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Params {
    return {};
  },

  toJSON(_: Params): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Params>): Params {
    const message = createBaseParams();
    return message;
  },
};

function createBaseWeightedReceiver(): WeightedReceiver {
  return { receiver: "", weight: "" };
}

export const WeightedReceiver: MessageFns<WeightedReceiver> = {
  encode(message: WeightedReceiver, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.receiver !== "") {
      writer.uint32(10).string(message.receiver);
    }
    if (message.weight !== "") {
      writer.uint32(18).string(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeightedReceiver {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeightedReceiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeightedReceiver {
    return {
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
    };
  },

  toJSON(message: WeightedReceiver): unknown {
    const obj: any = {};
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    return obj;
  },

  create(base?: DeepPartial<WeightedReceiver>): WeightedReceiver {
    return WeightedReceiver.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WeightedReceiver>): WeightedReceiver {
    const message = createBaseWeightedReceiver();
    message.receiver = object.receiver ?? "";
    message.weight = object.weight ?? "";
    return message;
  },
};

function createBaseRewardedReceiver(): RewardedReceiver {
  return { receiver: "", rewards: [] };
}

export const RewardedReceiver: MessageFns<RewardedReceiver> = {
  encode(message: RewardedReceiver, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.receiver !== "") {
      writer.uint32(10).string(message.receiver);
    }
    for (const v of message.rewards) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardedReceiver {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardedReceiver();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardedReceiver {
    return {
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      rewards: globalThis.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: RewardedReceiver): unknown {
    const obj: any = {};
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RewardedReceiver>): RewardedReceiver {
    return RewardedReceiver.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RewardedReceiver>): RewardedReceiver {
    const message = createBaseRewardedReceiver();
    message.receiver = object.receiver ?? "";
    message.rewards = object.rewards?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
