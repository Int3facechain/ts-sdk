// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/incentives/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { WeightedReceiver } from "./incentives";

export const protobufPackage = "int3face.incentives";

/** MsgUpdateBridgeFeesRequest defines the Msg/DistributeIncentives request type. */
export interface MsgDistributeIncentives {
  /**
   * Sender is a sender's Int3face address
   * Must be a governance address.
   */
  sender: string;
  /**
   * WeightedReceivers is a list of receivers and the percentage of the rewards
   * that they will receive. All the weights in the list must be not greater
   * than 100. All the incentives assets will be distributed among the receivers
   * proportionally to their weights.
   */
  weightedReceivers: WeightedReceiver[];
}

/**
 * MsgDistributeIncentivesResponse defines the Msg/DistributeIncentives response
 * type.
 */
export interface MsgDistributeIncentivesResponse {
}

function createBaseMsgDistributeIncentives(): MsgDistributeIncentives {
  return { sender: "", weightedReceivers: [] };
}

export const MsgDistributeIncentives: MessageFns<MsgDistributeIncentives> = {
  encode(message: MsgDistributeIncentives, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.weightedReceivers) {
      WeightedReceiver.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDistributeIncentives {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDistributeIncentives();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weightedReceivers.push(WeightedReceiver.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDistributeIncentives {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      weightedReceivers: globalThis.Array.isArray(object?.weightedReceivers)
        ? object.weightedReceivers.map((e: any) => WeightedReceiver.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgDistributeIncentives): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.weightedReceivers?.length) {
      obj.weightedReceivers = message.weightedReceivers.map((e) => WeightedReceiver.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDistributeIncentives>): MsgDistributeIncentives {
    return MsgDistributeIncentives.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDistributeIncentives>): MsgDistributeIncentives {
    const message = createBaseMsgDistributeIncentives();
    message.sender = object.sender ?? "";
    message.weightedReceivers = object.weightedReceivers?.map((e) => WeightedReceiver.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgDistributeIncentivesResponse(): MsgDistributeIncentivesResponse {
  return {};
}

export const MsgDistributeIncentivesResponse: MessageFns<MsgDistributeIncentivesResponse> = {
  encode(_: MsgDistributeIncentivesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDistributeIncentivesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDistributeIncentivesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDistributeIncentivesResponse {
    return {};
  },

  toJSON(_: MsgDistributeIncentivesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDistributeIncentivesResponse>): MsgDistributeIncentivesResponse {
    return MsgDistributeIncentivesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDistributeIncentivesResponse>): MsgDistributeIncentivesResponse {
    const message = createBaseMsgDistributeIncentivesResponse();
    return message;
  },
};

/** Msg defines the bridge module's gRPC message service. */
export interface Msg {
  /**
   * DistributeIncentives defines a method for distributing collected fees.
   * Must be updated by the governance only.
   */
  DistributeIncentives(request: MsgDistributeIncentives): Promise<MsgDistributeIncentivesResponse>;
}

export const MsgServiceName = "int3face.incentives.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.DistributeIncentives = this.DistributeIncentives.bind(this);
  }
  DistributeIncentives(request: MsgDistributeIncentives): Promise<MsgDistributeIncentivesResponse> {
    const data = MsgDistributeIncentives.encode(request).finish();
    const promise = this.rpc.request(this.service, "DistributeIncentives", data);
    return promise.then((data) => MsgDistributeIncentivesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
