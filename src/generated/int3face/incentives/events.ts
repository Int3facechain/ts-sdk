// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: int3face/incentives/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { RewardedReceiver } from "./incentives";

export const protobufPackage = "int3face.incentives";

export interface EventIncentivesDistributed {
  /** Sender is the address of the account that updated the bridge fees. */
  sender: string;
  /** RewardedReceivers is the list of addresses that received rewards. */
  receivers: RewardedReceiver[];
}

function createBaseEventIncentivesDistributed(): EventIncentivesDistributed {
  return { sender: "", receivers: [] };
}

export const EventIncentivesDistributed: MessageFns<EventIncentivesDistributed> = {
  encode(message: EventIncentivesDistributed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.receivers) {
      RewardedReceiver.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventIncentivesDistributed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventIncentivesDistributed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receivers.push(RewardedReceiver.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventIncentivesDistributed {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      receivers: globalThis.Array.isArray(object?.receivers)
        ? object.receivers.map((e: any) => RewardedReceiver.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EventIncentivesDistributed): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.receivers?.length) {
      obj.receivers = message.receivers.map((e) => RewardedReceiver.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EventIncentivesDistributed>): EventIncentivesDistributed {
    return EventIncentivesDistributed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventIncentivesDistributed>): EventIncentivesDistributed {
    const message = createBaseEventIncentivesDistributed();
    message.sender = object.sender ?? "";
    message.receivers = object.receivers?.map((e) => RewardedReceiver.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
